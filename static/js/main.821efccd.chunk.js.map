{"version":3,"sources":["components/info.js","components/form.js","components/weather.js","App.js","serviceWorker.js","index.js"],"names":["Info","props","className","Form","onSubmit","weatherGet","type","name","placeholder","Weather","city","id","country","temperature","pressure","sunset","error","WeatherKey","App","state","undefined","getWeather","event","a","async","preventDefault","target","elements","value","addZero","i","fetch","apiUrl","json","data","console","log","sys","setDate","Date","toLocaleDateString","sunsetDate","getHours","getMinutes","setState","Math","round","main","temp","coutry","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iQAUeA,EARF,SAAAC,GAAK,OACd,yBAAKC,UAAU,QACX,iIACA,gLCIOC,EAPF,SAAAF,GAAK,OACd,0BAAMG,SAAUH,EAAMI,YAClB,2BAAOC,KAAK,OAAOC,KAAK,OAAOC,YAAY,8DAC3C,+GCWOC,EAdC,SAAAR,GAAK,OACjB,6BACEA,EAAMS,MACR,yBAAKC,GAAG,WACJ,0HAAqBV,EAAMS,KAA3B,KAAmCT,EAAMW,SACzC,kGAAiBX,EAAMY,aACvB,gFAAcZ,EAAMa,UACnB,8DAAWb,EAAMc,SAGtB,2BAAKd,EAAMe,SCNTC,G,MAAa,oCAwEJC,E,2MApEbC,MAAQ,CACNN,iBAAaO,EACbV,UAAMU,EACNR,aAASQ,EACTN,cAAUM,EACVL,YAAQK,EACRJ,WAAOI,G,EAGTC,WAAa,SAAOC,GAAP,2BAAAC,EAAAC,OAAA,mDACXF,EAAMG,mBACFf,EAAOY,EAAMI,OAAOC,SAASjB,KAAKkB,OAF3B,wBASAC,EAAT,SAAiBC,GAIf,OAHIA,EAAI,KACNA,EAAI,IAAMA,GAELA,GAbA,WAAAP,EAAA,MAKTQ,MAAK,4DAAuDrB,EAAvD,kBAAqEO,EAArE,mBALI,cAIHe,EAJG,kBAAAT,EAAA,MAMUS,EAAOC,QANjB,OAMHC,EANG,OAOTC,QAAQC,IAAIF,GASRnB,EAASmB,EAAKG,IAAItB,QAClBuB,EAAU,IAAIC,KAAc,IAATxB,IACfyB,qBACJC,EAAaZ,EAAQS,EAAQI,SAAS3B,IAAW,IAAMc,EAAQS,EAAQK,WAAW5B,IAEtF,EAAK6B,SAAS,CACZ/B,YAAagC,KAAKC,MAAMZ,EAAKa,KAAKC,MAClCtC,KAAMwB,EAAK3B,KACXK,QAASsB,EAAKG,IAAIzB,QAClBE,SAAUoB,EAAKa,KAAKjC,SACpBC,OAAQ0B,EACRzB,WAAOI,IA3BA,wBA8BT,EAAKwB,SAAS,CACZI,UAAM5B,EACNV,UAAMU,EACN6B,YAAQ7B,EACRN,cAAUM,EACVL,YAAQK,EACRJ,MAAO,qIApCA,uC,wEA0CX,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAMX,WAAc6C,KAAK7B,aACzB,kBAAC,EAAD,CACAR,YAAaqC,KAAK/B,MAAMN,YACxBH,KAAMwC,KAAK/B,MAAMT,KACjBE,QAASsC,KAAK/B,MAAMP,QACpBE,SAAUoC,KAAK/B,MAAML,SACrBC,OAAQmC,KAAK/B,MAAMJ,OACnBC,MAAOkC,KAAK/B,MAAMH,a,GA/DRmC,IAAMC,WCIJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.821efccd.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Info = props => (\r\n    <div className=\"info\">\r\n        <h2>Приложение погоды</h2>\r\n        <p>Узнать погоду в вашем городe</p>\r\n    </div>\r\n);\r\n\r\n\r\nexport default Info;","import React from \"react\";\r\n\r\nconst Form = props => (\r\n    <form onSubmit={props.weatherGet}>\r\n        <input type=\"text\" name=\"city\" placeholder=\"Город (Англ)\"/>\r\n        <button>Узнать погоду</button>\r\n    </form>\r\n);\r\n\r\nexport default Form;","import React from \"react\";\r\n\r\nconst Weather = props => (\r\n    <div>\r\n    { props.city &&\r\n    <div id=\"weather\">\r\n        <p>Местонахождение: {props.city}, {props.country}</p>\r\n        <p>Температура: {props.temperature}</p>\r\n        <p>Давление: {props.pressure}</p>\r\n         <p>Заход: {props.sunset}</p>\r\n    </div>\r\n    }\r\n    <p>{ props.error }</p>\r\n    </div>\r\n);\r\n\r\nexport default Weather;","import React from \"react\";\nimport Info from \"./components/info\";\nimport Form from \"./components/form\";\nimport Weather from \"./components/weather\";\nimport \"./App.css\";\n\nconst WeatherKey = \"468fb32ccc63de5a026ac34d3a0331c1\";\n\nclass App extends React.Component {\n\n  state = {\n    temperature: undefined,\n    city: undefined,\n    country: undefined,\n    pressure: undefined,\n    sunset: undefined,\n    error: undefined\n  }\n\n  getWeather = async (event) => {\n    event.preventDefault();\n    let city = event.target.elements.city.value;\n    if(city) {\n      const apiUrl = await \n      fetch (`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${WeatherKey}&units=metric`);\n      const data = await apiUrl.json();\n      console.log(data);\n\n      function addZero(i) {\n        if (i < 10) {\n          i = \"0\" + i;\n        }\n        return i;\n      }\n\n      let sunset = data.sys.sunset;\n      let setDate = new Date(sunset * 1000);\n      setDate.toLocaleDateString();\n      let sunsetDate = addZero(setDate.getHours(sunset)) + \":\" + addZero(setDate.getMinutes(sunset));\n\n      this.setState({\n        temperature: Math.round(data.main.temp),\n        city: data.name,\n        country: data.sys.country,\n        pressure: data.main.pressure,\n        sunset: sunsetDate,\n        error: undefined\n      });\n    } else {\n      this.setState({\n        temp: undefined,\n        city: undefined,\n        coutry: undefined,\n        pressure: undefined,\n        sunset: undefined,\n        error: \"Введите название города\"\n      });\n    }\n} \n\n  render () {\n    return (\n      <div>\n        <Info />\n        <Form weatherGet = {this.getWeather} />\n        <Weather \n        temperature={this.state.temperature}\n        city={this.state.city}\n        country={this.state.country}\n        pressure={this.state.pressure}\n        sunset={this.state.sunset}\n        error={this.state.error}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}